<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Okapi Docs</title>
    <link>https://okapilib.github.io/OkapiLib/</link>
    <description>Recent content on Okapi Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://okapilib.github.io/OkapiLib/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/chassiscontroller/chassiscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/chassiscontroller/chassiscontroller/</guid>
      <description>ChassisController (abstract) The ChassisController class an interface for controlling a robot&amp;rsquo;s chassis: it provides methods that build upon the basic methods ChassisModel has for more accurate control.
Constructor //Signature ChassisController(const ChassisModelParams&amp;amp; imodelParams) ChassisController(std::shared_ptr&amp;lt;ChassisModel&amp;gt; imodel)     Parameter Description     imodelParams ChassisModelParams (used to make a new ChassisModel)   imodel An existing ChassisModel    driveStraight //Signature virtual void driveStraight(const int itarget) = 0  Drive the robot straight for a distance of itarget in the units of itarget.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/chassiscontroller/chassiscontrollerpid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/chassiscontroller/chassiscontrollerpid/</guid>
      <description>ChassisControllerPid The ChassisControllerPid class inherits from ChassisController and implements its interface using PID control.
Constructor //Signature ChassisControllerPid(const ChassisModelParams&amp;amp; imodelParams, const PidParams&amp;amp; idistanceParams, const PidParams&amp;amp; iangleParams) ChassisControllerPid(const std::shared_ptr&amp;lt;ChassisModel&amp;gt;&amp;amp; imodel, const PidParams&amp;amp; idistanceParams, const PidParams&amp;amp; iangleParams) //Make a new ChassisControllerPid using a skid steer model with two motors per side ChassisControllerPid foo( SkidSteerModelParams&amp;lt;2&amp;gt;({1, 3, 2, 4}, //The four motor ports encoderInit(1, 2, false), //Left encoder encoderInit(3, 4, true)), //Right encoder PidParams(2, 0.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/chassiscontroller/odomchassiscontroller/odomchassiscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/chassiscontroller/odomchassiscontroller/odomchassiscontroller/</guid>
      <description>OdomChassisController (abstract) The OdomChassisController class inherits from ChassisController. It extends the ChassisController interface to add odometry-based functionality.
Constructor //Signature OdomChassisController(OdomParams iparams)     Parameter Description     iparams OdomParams (used to make a new Odometry)    This class creates a new task inside its constructor and references a static class (Odometry). Be careful and remember to only make one.  driveToPoint //Signature virtual void driveToPoint(const float ix, const float iy, const bool ibackwards = false, const float ioffset = 0) = 0     Parameter Description     ix X coordinate of destination   iy Y coordinate of destination   ibackwards Whether to drive to the destination backwards (default false)   ioffset How far back from the destination to stop (default 0)    Drive to the point (ix, iy) in the field frame.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/chassiscontroller/odomchassiscontroller/odomchassiscontrollerpid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/chassiscontroller/odomchassiscontroller/odomchassiscontrollerpid/</guid>
      <description> OdomChassisControllerPid The OdomChassisControllerPid class inherits from OdomChassisController and from ChassisControllerPid. It implements the OdomChassisController interface using PID control.
Constructor //Signature OdomChassisControllerPid(const OdomParams&amp;amp; params, const PidParams&amp;amp; idistanceParams, const PidParams&amp;amp; iangleParams) //Make a new OdomChassisControllerPid using a skid steer model with two motors per side OdomChassisControllerPid foo( OdomParams( SkidSteerModelParams&amp;lt;2&amp;gt;({1,3,2,4}, //The four motor ports encoderInit(1,2,false), //Left encoder encoderInit(3,4,true)), //Right encoder 1.345, //Distance scale (encoder ticks to mm) 12.88361), //Turn scale (encoder ticks to deg) PidParams(0,0,0), //Distance PID controller PidParams(0,0,0)); //Angle PID controller     Parameter Description     params OdomParams (used to make a new Odometry)   idistanceParams PidParams for the distance PID controller   iangleParams PidParams for the angle PID controller    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/chassismodel/chassismodel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/chassismodel/chassismodel/</guid>
      <description>ChassisModel (abstract) The ChassisModel class is an interface to a robot&amp;rsquo;s chassis: it provides methods to control the chassis and to read from standard sensors placed on most chassis (i.e., quadrature encoders).
Constructor //Signature ChassisModel()  The constructor does not take any parameters.
driveForward //Signature virtual void driveForward(const int power) = 0  Drives the chassis forwards by setting all motors to the input power. A positive value for power should cause all chassis wheels to move the robot forward in a straight line.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/chassismodel/chassismodelparams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/chassismodel/chassismodelparams/</guid>
      <description> ChassisModelParams (Abstract) The ChassisModelParams class encapsulates the parameters a ChassisModel takes.
Constructor //Signature ChassisModelParams()  The constructor does not take any parameters.
make Allocate a new ChassisModel and return a std::shared_ptr to it. Most users will not have to call this, classes that take a ChassisModel will figure out the memory model themselves.
//Signature virtual std::shared_ptr&amp;lt;ChassisModel&amp;gt; make() const = 0  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/chassismodel/skidsteermodel/skidsteermodel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/chassismodel/skidsteermodel/skidsteermodel/</guid>
      <description> SkidSteerModel The SkidSteerModel class inherits from ChassisModel and takes a template parameter size_t motorsPerSide (the number of motors per each of the two sides of the chassis). It is a model for a skid steer drive (also called a tank drive).
Constructor //Signature SkidSteerModel(const std::array&amp;lt;Motor, motorsPerSide * 2&amp;gt;&amp;amp; imotorList, const QuadEncoder&amp;amp; ileftEnc, const QuadEncoder&amp;amp; irightEnc) SkidSteerModel(const std::array&amp;lt;Motor, motorsPerSide * 2&amp;gt;&amp;amp; imotorList, const IME&amp;amp; ileftIME, const IME&amp;amp; irightIME) SkidSteerModel(const SkidSteerModelParams&amp;lt;motorsPerSide&amp;gt;&amp;amp; iparams) SkidSteerModel(const SkidSteerModel&amp;lt;motorsPerSide&amp;gt;&amp;amp; other) //Construct a SkidSteerModel with four motors (two per side) and two encoders //Left side motors are ports 1 and 3 //Right side motors are ports 2 and 4 //Right side encoder is reversed because it is a mirror of the left side SkidSteerModel&amp;lt;2&amp;gt; foo({1, 3, 2, 4}, QuadEncoder(1, 2, false), QuadEncoder(3, 4, true));     Parameter Description     imotorList The left and right side motors for the drive in the format, {left motors, right motors}   ileftEnc The quadrature encoder for the left side   irightEnc The quadrature encoder for the right side   ileftIME The IME for the left side   irightIME The IME for the right side    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/chassismodel/skidsteermodel/skidsteermodelparams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/chassismodel/skidsteermodel/skidsteermodelparams/</guid>
      <description> SkidSteerModelParams The SkidSteerModelParams class inherits from ChassisModelParams. It encapsulates the parameters a SkidSteerModel takes.
Constructor //Signature SkidSteerModelParams(const std::array&amp;lt;Motor, motorsPerSide * 2&amp;gt;&amp;amp; imotorList, const QuadEncoder&amp;amp; ileftEnc, const QuadEncoder&amp;amp; irightEnc): SkidSteerModelParams(const std::array&amp;lt;Motor, motorsPerSide * 2&amp;gt;&amp;amp; imotorList, const IME&amp;amp; ileftIME, const IME&amp;amp; irightIME)     Parameter Description     imotorList The left and right side motors for the drive in the format, {left motors, right motors}   ileftEnc The quadrature encoder for the left side   irightEnc The quadrature encoder for the right side   ileftIME The IME for the left side   irightIME The IME for the right side    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/chassismodel/xdrivemodel/xdrivemodel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/chassismodel/xdrivemodel/xdrivemodel/</guid>
      <description>XDriveModel The XDriveModel class inherits from ChassisModel and takes a template parameter size_t motorsPerCorner (the number of motors per each of the four corners of the chassis). It is a model for an x-drive.
Constructor //Signature XDriveModelParams(const std::array&amp;lt;unsigned char, motorsPerCorner * 4&amp;gt;&amp;amp; imotorList, const QuadEncoder&amp;amp; ileftEnc, const QuadEncoder&amp;amp; irightEnc): XDriveModelParams(const std::array&amp;lt;unsigned char, motorsPerCorner * 4&amp;gt;&amp;amp; imotorList, const IME&amp;amp; ileftIME, const IME&amp;amp; irightIME) XDriveModel(const XDriveModelParams&amp;lt;motorsPerCorner&amp;gt;&amp;amp; iparams) XDriveModel(const XDriveModel&amp;lt;motorsPerCorner&amp;gt;&amp;amp; other) //Construct an XDriveModel with four motors (one per corner) and two encoders //Top left motor is port 1, top right motor is port 2 //Bottom right motor is port 3, bottom left motor is port 4 //Right side encoder is reversed because it is a mirror of the left side XDriveModel&amp;lt;1&amp;gt; foo({1, 2, 3, 4}, QuadEncoder(1, 2, false), QuadEncoder(3, 4, true)); //Construct an XDriveModel with eight motors (two per corner) and two encoders //Top left motors are ports 1 and 2, top right motors are ports 3 and 4 //Bottom right motors are ports 5 and 6, bottom left motors are ports 7 and 8 //Right side encoder is reversed because it is a mirror of the left side XDriveModel&amp;lt;2&amp;gt; foo({1, 2, 3, 4, 5, 6, 7, 8}, QuadEncoder(1, 2, false), QuadEncoder(3, 4, true));     Parameter Description     imotorList The chassis motors for the drive in the clockwise format, {top left motors, top right motors, bottom right motors, bottom left motors}   ileftEnc The quadrature encoder for the left side   irightEnc The quadrature encoder for the right side   ileftIME The IME for the left side   irightIME The IME for the right side    xArcade //Signature void xArcade(const int verticalVal, const int horizontalVal, const int rotateVal)  Specifically for an x-drive, power the motors like arcade drive with a channel for rotation.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/chassismodel/xdrivemodel/xdrivemodelparams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/chassismodel/xdrivemodel/xdrivemodelparams/</guid>
      <description> XDriveModelParams The XDriveModelParams class inherits from ChassisModelParams. It encapsulates the parameters an XDriveModel takes.
Constructor //Signature XDriveModelParams(const std::array&amp;lt;unsigned char, motorsPerCorner * 4&amp;gt;&amp;amp; imotorList, const QuadEncoder&amp;amp; ileftEnc, const QuadEncoder&amp;amp; irightEnc): XDriveModelParams(const std::array&amp;lt;unsigned char, motorsPerCorner * 4&amp;gt;&amp;amp; imotorList, const IME&amp;amp; ileftIME, const IME&amp;amp; irightIME)     Parameter Description     imotorList The chassis motors for the drive in the clockwise format, {top left motors, top right motors, bottom right motors, bottom left motors}   ileftEnc The quadrature encoder for the left side   irightEnc The quadrature encoder for the right side   ileftIME The IME for the left side   irightIME The IME for the right side    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/control/controlobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/control/controlobject/</guid>
      <description>ControlObject (abstract) The ControlObject class is an interface to closed-loop controllers. It requires implementation of step, target, and output functions.
step //Signature virtual float step(const float ireading) = 0  Do one iteration of the control math to compute a new motor power. Normally called in a loop.
   Parameter Description     ireading New sensor reading    setTarget //Signature virtual void setTarget(const float itarget) = 0  Set the target value.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/control/genericcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/control/genericcontroller/</guid>
      <description>GenericController The GenericController class combines motors and a ControlObject into one package that uses the controller to control the motors as a group (all motors get the same controller output).
Constructor //Signature GenericController(const std::array&amp;lt;Motor, motorNum&amp;gt; &amp;amp;imotorList, const std::shared_ptr&amp;lt;ControlObject&amp;gt; &amp;amp;iptr)     Parameter Description     imotorList std::array of Motor that will be controlled   iptr ControlObject used to control the motors    step //Signature void step(const float ireading)  Have the ControlObject do one iteration and then power the motors with the output.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/control/pid/nspid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/control/pid/nspid/</guid>
      <description>NsPid Constructor //Signature NsPid(const PidParams&amp;amp; iparams, const VelMathParams&amp;amp; ivelParams, const float iminVel, const float iscale = 0.1)     Parameter Description     iparams PidParams to make the internal PID controller   ivelParams VelMathParams for the velocity calculations   iminVel Minimum velocity at which the controller will start reducing the output power   iscale Scale to reduce the output power by    step //Signature virtual float step(const float inewReading) override  Do one iteration of Pid math to compute a new motor power.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/control/pid/pid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/control/pid/pid/</guid>
      <description>Pid The Pid class implements the Pid algorithm, with some quality-of-life changes to support online tuning. Inherits from ControlObject.
Constructor //Signature Pid(const float ikP, const float ikI, const float ikD, const float ikBias = 0) Pid(const PidParams&amp;amp; params)     Parameter Description     ikP Proportional gain   ikI Integral gain   ikD Derivative gain   ikBias Controller bias (this value added to output, default 0)   params PidParams    step //Signature virtual float step(const float inewReading) override  Do one iteration of Pid math to compute a new motor power.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/control/pid/pidparams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/control/pid/pidparams/</guid>
      <description> PidParams The PidParams class encapsulates the parameters a Pid takes.
   Parameter Description     kP Proportional gain   kI Integral gain   kD Derivative gain   kBias Controller bias (this value added to output)    Constructor //Signature PidParams(const float ikP, const float ikI, const float ikD, const float ikBias = 0)     Parameter Description     ikP Proportional gain   ikI Integral gain   ikD Derivative gain   ikBias Controller bias (this value added to output, default 0)    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/control/pid/velpid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/control/pid/velpid/</guid>
      <description>VelPid The VelPid class implements the Pid algorithm for the velocity domain, with some quality-of-life changes to support online tuning. Inherits from ControlObject.
Constructor //Signature VelPid(const float ikP, const float ikD) VelPid(const float ikP, const float ikD, const VelMath&amp;amp; ivelMath) VelPid(const VelPidParams&amp;amp; params)     Parameter Description     ikP Proportional gain   ikD Derivative gain   ivelMath VelMath   params VelPidParams    stepVel //Signature virtual float stepVel(const float inewReading)  Do one iteration of velocity math to compute a new filtered velocity.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/control/pid/velpidparams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/control/pid/velpidparams/</guid>
      <description> VelPidParams The VelPidParams class encapsulates the parameters a VelPid takes.
   Parameter Description     kP Proportional gain   kD Derivative gain    Constructor //Signature VelPidParams(const float ikP, const float ikD)     Parameter Description     ikP Proportional gain   ikD Derivative gain    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/control/velmath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/control/velmath/</guid>
      <description>VelMath Constructor //Signature VelMath(const float iticksPerRev, const float iQ = 0.0001, const float iR = ipow(0.2, 2)) VelMath(const VelMathParams&amp;amp; iparams)     Parameter Description     iticksPerRev Encoder ticks per one revolution   iQ EKF Process variance   iR EKF Measurement variance    step //Signature float step(const float inewPos)  Calculate, filter, and return a new velocity. This need to be called every so many milliseconds (not any faster than 15 ms).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/device/button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/device/button/</guid>
      <description>Button The Button class is a sample wrapper around a digital input port that represents a button.
Constructor //Signature explicit constexpr Button() explicit constexpr Button(const unsigned char iport, const bool iinverted = false) explicit constexpr Button(const unsigned char ijoystick, const unsigned char ibuttonGroup, const unsigned char ibutton, const bool iinverted = false) explicit constexpr Button(PROS_FILE* ilcdPort, const unsigned char ilcdButton, const bool iinverted = false)  Button or limit switch constructor:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/device/cubicmotor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/device/cubicmotor/</guid>
      <description>CubicMotor The CubicMotor class provides a cubic-control based implementation of the set function Motor defines. This means that the motor power from set follows a cubic curve instead of the default identity function. The setTS function is not overridden and so provides the same behavior as in Motor.
Constructor //Signature explicit constexpr CubicMotor(const unsigned char iport, const int *its) explicit constexpr CubicMotor(const unsigned char iport, const int isign = 1, const int *its = motor::trueSpeed)     Parameter Description     iport Motor port   isign 1 for forward, -1 for reversed   its TrueSpeed array to linearize the motor controller    This class also has literals available:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/device/cubicslewmotor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/device/cubicslewmotor/</guid>
      <description>CubicSlewMotor The CubicSlewMotor class adds a slew rate to the CubicMotor class.
Constructor //Signature CubicSlewMotor(const CubicMotor&amp;amp; imotor, const float islewRate)     Parameter Description     imotor Motor to slew   islewRate Slew rate    set //Signature virtual void set(const int val) const  Slew the power of this motor up to val.
   Parameter Description     val Target motor power    setTS //Signature virtual void set(const int val) const  Slew the power of this motor up to val using trueSpeed.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/device/ime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/device/ime/</guid>
      <description>IME The IME class is a simple container for an IME. Inherits from RotarySensor.
Constructor //Signature IME(const unsigned int iindex) IME(const unsigned int iindex, const bool ireversed)     Parameter Description     iindex IME index in the chain   ireversed Whether the IME is reversed or not (clockwise turn increases vs. decreases ticks)    This class also has literals available:
   Literal IME Value     n_ime IME(n, false)   n_rime IME(n, true)    get //Signature int get() override  Return the current tick count.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/device/motor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/device/motor/</guid>
      <description>Motor The Motor class provides a wrapper around the default motor utilities.
Constructor //Signature explicit constexpr Motor(const unsigned char iport, const int *its) explicit constexpr Motor(const unsigned char iport, const int isign = 1, const int *its = motor::trueSpeed)     Parameter Description     iport Motor port   isign 1 for forward, -1 for reversed   its TrueSpeed array to linearize the motor controller    This class also has literals available:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/device/potentiometer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/device/potentiometer/</guid>
      <description>Potentiometer Constructor //Signature explicit constexpr Potentiometer() explicit constexpr Potentiometer(const unsigned char iport) explicit constexpr Potentiometer(const unsigned char iport, const bool iinverted)     Parameter Description     iport Analog input port   iinverted Whether the potentiometer is inverted (range is 0-&amp;gt;4095 or 4095-&amp;gt;0)    This class also has literals available:
   Literal Potentiometer Value     n_p Potentiometer(n, false)   n_ip Potentiometer(n, true)    get //Signature int get() const  Return the value of this potentiometer.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/device/quadencoder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/device/quadencoder/</guid>
      <description>QuadEncoder The QuadEncoder class is a simple container for an encoder. Inherits from RotarySensor.
Constructor //Signature QuadEncoder(const unsigned char iportTop, const unsigned char iportBottom) QuadEncoder(const unsigned char iportTop, const unsigned char iportBottom, const bool ireversed)     Parameter Description     iportTop Top digital in port   iportBottom Bottom digital in port   ireversed Whether the encoder is reversed or not (clockwise turn increases vs.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/device/rangefinder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/device/rangefinder/</guid>
      <description>RangeFinder Constructor //Signature RangeFinder(const unsigned char iportTop, const unsigned char iportBottom)     Parameter Description     iportTop Top digital port   iportBottom Bottom digital port    get //Signature int get()  Return the current measured range in centimeters.
getFiltered //Signature int getFiltered()  Return the median measured range in centimeters. The median is measured across the previous five measurements.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/device/rotarysensor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/device/rotarysensor/</guid>
      <description>RotarySensor (abstract) The RotarySensor class is a simple container for a sensor which spins indefinitely to measure rotation, like a QuadEncoder or an IME.
get //Signature virtual int get() = 0  Return the current tick count.
reset //Signature virtual void reset() = 0  Reset the tick count to zero.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/device/slewmotor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/device/slewmotor/</guid>
      <description>SlewMotor The SlewMotor class adds a slew rate to the Motor class.
Constructor //Signature SlewMotor(const Motor&amp;amp; imotor, const float islewRate)     Parameter Description     imotor Motor to slew   islewRate Slew rate    set //Signature virtual void set(const int val) const  Slew the power of this motor up to val.
   Parameter Description     val Target motor power    setTS //Signature virtual void set(const int val) const  Slew the power of this motor up to val using trueSpeed.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/filter/avgfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/filter/avgfilter/</guid>
      <description>AvgFilter The AvgFilter class inherits from Filter and takes a template parameter std::size_t n&amp;gt; (the number of inputs to average). It is a finite impulse response (FIR) filter that averages the last n inputs.
Constructor //Signature AvgFilter()  The constructor does not take any parameters.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/filter/demafilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/filter/demafilter/</guid>
      <description>DemaFilter The DemaFilter class inherits from Filter. It is an infinite impulse response (IIR) filter that implements the double exponential moving average algorithm (EMA). This is very similar to the normal EMA, except it can pick up on trends in data and follow the current trend until a new trend starts. This filter performs better than a single EMA when data frequently follows a trend.
Constructor //Signature DemaFilter(const float ialpha, const float ibeta)     Parameter Description     ialpha Alpha gain   ibeta Beta gain    setGains //Signature void setGains(const float ialpha, const float ibeta)  Set new gains for this filter</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/filter/ekffilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/filter/ekffilter/</guid>
      <description>EKFFilter The EKFFilter class inherits from Filter. It is a very simple implementation of a one-dimensional extended kalman filter. It does not have any internal model and it is only suited for filtering simple signals, such as a robot&amp;rsquo;s velocity.
Constructor //Signature EKFFilter(const float iQ = 0.0001, const float iR = ipow(0.2, 2))  Process variance is an estimate of how inaccurate the model is. Measurement variance is an estimate of how noisy the sensor is.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/filter/emafilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/filter/emafilter/</guid>
      <description> EmaFilter The EmaFilter class inherits from Filter. It is an infinite impulse response (IIR) filter that implements the exponential moving average algorithm (EMA).
Constructor //Signature EmaFilter(const float ialpha, const float ibeta)     Parameter Description     ialpha Alpha gain   ibeta Beta gain    setGains //Signature void setGains(const float ialpha, const float ibeta)  Set new gains for this filter
   Parameter Description     ialpha New alpha gain   ibeta New beta gain    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/filter/filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/filter/filter/</guid>
      <description>Filter (abstract) The Filter class is an interface for data filtering.
Constructor //Signature Filter()  The constructor does not take any parameters.
filter //Signature virtual float filter(const float ireading) = 0;  Filter an input and return the filtered output.
getOutput //Signature virtual float getOutput() const = 0;  Return the previous output.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/odometry/distanceandangle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/odometry/distanceandangle/</guid>
      <description> DistanceAndAngle The DistanceAndAngle class is a simple container for the two parameters returned by OdomMath::computeDistanceAndAngleToPoint.
   Member Description     length Distance to point   theta Angle to point    Constructor //Signature DistanceAndAngle(const float ilength, const float itheta) DistanceAndAngle()     Parameter Description     ilength Distance to point   itheta Angle to point    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/odometry/odommath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/odometry/odommath/</guid>
      <description>OdomMath The OdomMath class provides static implementations for common odometry operations.
computeDistanceToPoint //Signature static float computeDistanceToPoint(const float ix, const float iy, const OdomState&amp;amp; istate)  Calculate the distance from the robot to a point, (ix, iy).
   Parameter Description     ix X coordinate   iy Y coordinate   istate Odometry state    computeAngleToPoint //Signature static float computeAngleToPoint(const float ix, const float iy, const OdomState&amp;amp; istate)  Calculate the angle from the robot to a point, (ix, iy).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/odometry/odometry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/odometry/odometry/</guid>
      <description>Odometry The Odometry class tracks the robot as it moves, computing its position in the field frame. It is a singleton so its main method, step, can be called in a task.
setParams //Signature static void setParams(OdomParams&amp;amp; iparams)  Set the model, scale, and turnScale parameters.
   Parameter Description     iparams OdomParams    setScales //Signature static void setScales(const float iscale, const float iturnScale)  Set the scale and turnScale parameters.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/util/mathutil/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/util/mathutil/</guid>
      <description>MathUtil The MathUtil class provides static constexpr definitions for commonly used numbers, measurements, and conversion rates.
   Name Value Description     analogInToV 286.0 Converts an analog reading to a battery voltage measurement in Volts.   inchToMM 25.4 Converts one inch to millimeters.   degreeToRadian 0.01745 Converts one degree to radians.   radianToDegree 57.2958 Converts one radian to degrees.   imeHighTorTPR 627.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/api/util/timer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/util/timer/</guid>
      <description>Timer The Timer class has timing-related utilities to make measuring time differences and writing non-blocking code in loops easier.
Constructor //Signature Timer()  The constructor does not take any parameters.
getDt //Signature unsigned long getDt()  Return the time passed in ms since the last time this function was called.
getStartingTime //Signature unsigned long getStartingTime() const  Return the time in ms the timer was constructed.
getDtFromStart //Signature unsigned long getDtFromStart() const  Return the time passed in ms since the timer was constructed.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/buttontutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/buttontutorial/</guid>
      <description>Buttons The Vex EDR system has three kinds of buttons in it: push buttons &amp;amp; limit switches, joystick buttons, and LCD module buttons. Okapi provides a class to interact with all three.
Say you have a button on your robot you want to use to control something. This is the simplest use, so Okapi makes this easy:
#include &amp;lt;device/button.h&amp;gt; Button foo = 1_b; //literal for Button(1, false)  foo is now a non-inverted button in digital port 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/chassiscontrollertutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/chassiscontrollertutorial/</guid>
      <description>Chassis Controller Okapi provides a way to control a ChassisModel using closed-loop control, like PID, so you don&amp;rsquo;t have to rewrite a driveStraight() function every year. Rather than making a model directly, we can instead give ChassisModelParams to a ChassisController, which will instantiate the model for itself:
#include &amp;lt;chassis/chassisController.h&amp;gt; ChassisControllerPid controller(SkidSteerModelParams&amp;lt;2&amp;gt;({2_m, 3_m, 4_m, 5_m}, //Skid steer chassis with two motors per side QuadEncoder(1, 2, true), //Left encoder (reversed) QuadEncoder(3, 4)), //Right encoder PidParams(0.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/chassismodeltutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/chassismodeltutorial/</guid>
      <description>Chassis Model Okapi has a way to represent the most common robot chassis, skid steer and x-drive. With this model we can tell the robot how to move around in a general sense.
For example, a skid steer chassis with two motors per side and two quad encoders:
#include &amp;lt;chassis/chassisModel.h&amp;gt; SkidSteerModel&amp;lt;2&amp;gt; model({2_m, 3_m, 4_m, 5_m}, //Left motors: 2 &amp;amp; 3, right motors: 4 &amp;amp; 5 QuadEncoder(1, 2, true), //Left encoder (reversed) QuadEncoder(3, 4)); //Right encoder  Or you can have an x-drive with one motor per corner and two quad encoders:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/genconttutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/genconttutorial/</guid>
      <description>Generic Controller Often times, you have a closed-loop controller, sensor, and a few motors acting together as a system, and you wind up with code that powers each motor individually like this:
#include &amp;lt;device/pid.h&amp;gt; int port1 = 1, port2 = 2; //Motor ports int pot = 1; //Potentiometer Pid controller(1, 0.2, 0.3); //PID controller with kP = 1, kI = 0.2, kD = 0.3 controller.setTarget(1500); //Set the target to 1500 on the potentiometer while (1) { controller.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/motortutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/motortutorial/</guid>
      <description>Motor Writing the full Motor constructor any time you want to specify a motor gets quite tedious, so Okapi has some literals that make specifying motors much easier:
Motor foo(2); //Motor on port 2 Motor foo = 2_m; //Equivalent literal Motor foo(2, true); //Reversed motor on port 2 Motor foo = 2_rm; //Equivalent literal  Okapi also provides cubic control if you prefer to drive that way:
CubicMotor foo(2); //Motor on port 2 CubicMotor foo = 2_3m; //Equivalent literal CubicMotor foo(2, true); //Reversed motor on port 2 CubicMotor foo = 2_3rm; //Equivalent literal  Both Motor and CubicMotor can be given to a ChassisModel, and the behavior of tank and arcade will change accordingly.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/pidtutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/pidtutorial/</guid>
      <description>PID Proportional-Integral-Derivative (PID) control is a simple and useful closed-loop controller. Say you have a subsystem with a motor and a potentiometer:
#include &amp;lt;device/pid.h&amp;gt; int port = 1; //Motor port int pot = 1; //Potentiometer Pid controller(1, 0.2, 0.3); //PID controller with kP = 1, kI = 0.2, kD = 0.3 controller.setTarget(1500); //Set the target to 1500 on the potentiometer while (1) { controller.step(analogRead(pot)); //Loop the controller with the new pot reading motorSet(port, controller.</description>
    </item>
    
    <item>
      <title>API Reference</title>
      <link>https://okapilib.github.io/OkapiLib/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/api/</guid>
      <description>This section is meant to be a quick reference for Okapi&amp;rsquo;s entire API, including methods the user may not normally interact with. This reference is broken into sections, covering one class per section. Subclasses are placed below the base class, but in different sections. If a class is marked (abstract) then it contains one or more pure virtual functions, and cannot be instantiated (it is designed only to be an interface).</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://okapilib.github.io/OkapiLib/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/getting-started/</guid>
      <description>Programming a Skills Robot This tutorial is a step-by-step guide to programming this simple skills robot:
 This robot has motors and sensors plugged into the following ports:
   Motor Port Description Motor Port Description     1  6 Right middle motor   2 Left front motor 7 Right bottom motor   3 Left middle motor 8 Lift left motor   4 Left bottom motor 9 Lift right motor   5 Right top motor 10        Digital Port Description Digital Port Description     1 Left encoder top wire 7    2 Left encoder bottom wire 8    3 Right encoder top wire 9    4 Right encoder bottom wire 10    5  11    6  12        Analog Port Description Analog Port Description     1 Lift potentiometer 5    2  6    3  7    4  8     Project Configuration If you are creating a new project, the easiest way to get up to speed is to download Okapi&amp;rsquo;s provided starter project, which comes pre-configured with everything you need to start coding.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://okapilib.github.io/OkapiLib/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/license/</guid>
      <description>Mozilla Public License Version 2.0  Definitions &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;  1.1. &amp;ldquo;Contributor&amp;rdquo; means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software.
1.2. &amp;ldquo;Contributor Version&amp;rdquo; means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor&amp;rsquo;s Contribution.
1.3. &amp;ldquo;Contribution&amp;rdquo; means Covered Software of a particular Contributor.
1.4. &amp;ldquo;Covered Software&amp;rdquo; means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof.</description>
    </item>
    
    <item>
      <title>Okapi Documentation</title>
      <link>https://okapilib.github.io/OkapiLib/home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/home/</guid>
      <description>Primary Objective Welcome to Okapi! This library is designed to make modeling and programming complex robot behavior easy, efficient, and maintainable. This library is targeted at PROS users looking to take their competition robot to the next level, whether that means starting to use motion profiles instead of PID or designing an autonomous robot from the ground up. Okapi also comes with an optional cross-platform client that lets you interact with your robot in real time as a graphical interface to Okapi&amp;rsquo;s modules.</description>
    </item>
    
    <item>
      <title>Okapi Documentation</title>
      <link>https://okapilib.github.io/OkapiLib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/</guid>
      <description>Primary Objective Welcome to Okapi! This library is designed to make modeling and programming complex robot behavior easy, efficient, and maintainable. This library is targeted at PROS users looking to take their competition robot to the next level, whether that means starting to use motion profiles instead of PID or designing an autonomous robot from the ground up. Okapi also comes with an optional cross-platform client that lets you interact with your robot in real time as a graphical interface to Okapi&amp;rsquo;s modules.</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/</guid>
      <description>Tutorials This section contains various tutorials for the different parts of OkapiLib. Scroll down or view the menus on the left to pick a tutorial.
Motor Writing the full Motor constructor any time you want to specify a motor gets quite tedious, so Okapi has some literals that make specifying motors much easier:
Motor foo(2); //Motor on port 2 Motor foo = 2_m; //Equivalent literal Motor foo(2, true); //Reversed motor on port 2 Motor foo = 2_rm; //Equivalent literal  Okapi also provides cubic control if you prefer to drive that way:</description>
    </item>
    
  </channel>
</rss>